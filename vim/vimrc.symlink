set nocompatible
filetype off

" Start by removing autocommands
autocmd!

" Just in case
let mapleader=','

" Windows plays by its own rules
if has('win64') || has('win32') || has('win32unix')
    let vimrc_vimfiles_dir=expand('~/vimfiles')
else
    let vimrc_vimfiles_dir=expand('~/.vim')
endif

let plug_path=expand(vimrc_vimfiles_dir . '/plugged')
call plug#begin(plug_path)

Plug 'https://github.com/SirVer/ultisnips'
Plug 'https://github.com/ycm-core/YouCompleteMe', { 'do': './install.py' }
Plug 'https://github.com/honza/vim-snippets'
Plug 'https://github.com/rust-lang/rust.vim', { 'for': 'rust' }
Plug 'https://github.com/vim-syntastic/syntastic'
Plug 'https://github.com/tomtom/tcomment_vim'
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/tpope/vim-sleuth'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/tpope/vim-vinegar'
Plug 'https://github.com/vim-airline/vim-airline'
Plug 'https://github.com/vim-airline/vim-airline-themes'
Plug 'https://github.com/altercation/vim-colors-solarized'
Plug 'https://github.com/ledger/vim-ledger', { 'for': 'ledger' }
Plug 'https://github.com/elixir-editors/vim-elixir', { 'for': 'elixir' }
Plug 'https://github.com/voikko/corevoikko', { 'rtp': 'tools/vim' }

call plug#end()

if !(has('win64') || has('win32') || has('win32unix')) || has('gui_running')
    " Windows CLI don't really like the colour scheme, gVim is fine
    set background=dark
    colorscheme solarized
endif


filetype plugin indent on

""" Plugin settings

" Syntastic
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_loc_list_height=5
let g:syntastic_check_on_open=1

if has('win32') || has('win64')
    let g:syntastic_python_python_exec='python'
else
    let g:syntastic_python_python_exec='/usr/bin/env python'
endif

" Maybe use pylint? I removed it for now
let g:syntastic_python_checkers=['flake8']

let g:syntastic_c_checkers=[]
let g:syntastic_cpp_checkers=[]

let g:syntastic_xml_chekers=['xmllint']

let g:syntastic_html_checkers=['tidy']

" chktex is annoying and, um, often wrong
" HELL all latex checking is HELL
let g:syntastic_tex_checkers=[]

" YouCompleteMe
let g:ycm_global_ycm_extra_conf=vimrc_vimfiles_dir . '/ycm_extra_conf.py'
let g:ycm_register_as_syntastic_checker=1
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_autoclose_preview_window_after_completion=1

" vim-tags
let g:vim_tags_auto_generate=1
let g:vim_tags_ignore_files=['.gitignore', '.svnignore', '.cvsignore']
let g:vim_tags_ignore_file_comment_pattern='^[#"]'
let g:vim_tags_directories=[".git", ".hg", ".svn", ".bzr", "_darcs", "CVS"]
let g:vim_tags_main_file='tags'
let g:vim_tags_extension='.tags'
let g:vim_tags_cache_dir=vimrc_vimfiles_dir

" UltiSnips
let g:UltiSnipsUsePythonVersion=3
let g:UltiSnipsExpandTrigger='<f10>'
let g:UltiSnipsListSnippets='<c-f10>'
let g:UltiSnipsJumpForwardTrigger='<f10>'
let g:UltiSnipsJumpBackwardTrigger='<s-f10>'

" Plugins loaded, enable syntax
syntax enable

set modelines=0
set nomodeline
set encoding=utf-8

" For plugin compatibility
set laststatus=2
set shortmess+=c

" Window autoresize
set equalalways eadirection=both

" Backups
set nobackup
" set backupdir=~/tmp,C:\\Temp,/tmp " Just in case though

" On error (make) first check all tabs, then create new one
set switchbuf=usetab,newtab

" Wrap to textwidth, wrap comments, insert comment leader on LF,
" insert comment leader on o, allow formatting with gq{motion}
" Pick up indentation from the *second* line
set formatoptions=tcroq2

" Session options
set ssop=blank,folds,help,sesdir,tabpages,winsize

" Allow backspacing
set backspace=indent,eol,start

" 4-wide space tabs
" Replaced by vim-sleuth, I hope
" set tabstop=4 softtabstop=4 shiftwidth=4 expandtab

" Default to hash comments instead of C comments (???)
set comments=b:#

" C family comment settings
" Remove text formatting from formatoptions
autocmd FileType c,d,cpp setlocal fo-=t
" Priority increases as you get lower in this list
autocmd FileType c,d,cpp setlocal comments^=://
autocmd FileType c,d,cpp setlocal comments^=:///
autocmd FileType c,d,cpp setlocal comments^=sr:/*,mb:*,ex:*/
autocmd FileType c,d,cpp setlocal comments^=sr:/**,mb:*,ex:*/
autocmd FileType d setlocal comments^=sr:/+,mb:+,ex:+/
autocmd FileType d setlocal comments^=sr:/++,mb:+,ex:+/

" Coolbasic
autocmd BufNewFile,BufRead *.cb setfiletype coolbasic
autocmd BufNewFile,BufRead *.CB setfiletype coolbasic
" CoolBasic needs all these, always
autocmd FileType coolbasic setlocal comments=:\',://
autocmd FileType coolbasic setlocal sts=4 sw=4 et
autocmd FileType coolbasic setlocal fileformat=dos

" Vimscript comments
autocmd FileType vim setlocal comments=:\"

" Makefiles need tabs
autocmd FileType make setlocal noet

" Python wrap to tw only in comments -> remove t from fo
autocmd FileType python setlocal fo-=t
" also set tw
autocmd FileType python setlocal tw=72

" Default to latex
let g:tex_flavor = "latex"

" Smarter searching
set ignorecase
set smartcase

" Incremental searches w/ hilight
set incsearch
set hlsearch

" vim-ledger
let g:ledger_extra_options = '--pedantic --explicit'
let g:ledger_maxwidth = 60
let g:ledger_decimal_sep = '.'
let g:ledger_align_at = 48
let g:ledger_date_format = '%Y-%m-%d'
if exists('g:ycm_filetype_blacklist')
  call extend(g:ycm_filetype_blacklist, { 'ledger': 1 })
endif

au FileType ledger inoremap <silent> <Tab> <C-r>=ledger#autocomplete_and_align()<CR>
au FileType ledger vnoremap <silent> <Tab> :LedgerAlign<CR>

" Autoloader
augroup myvimrc
au!
au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END
